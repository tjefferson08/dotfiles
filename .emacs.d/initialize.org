#+STARTUP: overview
#+PROPERTY: header-args :results silent

* global keybindings (minimize!)
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-;") 'helm-mini)

    ;; Easier undo-in-region
    (define-key evil-visual-state-map (kbd "u") 'undo)
  #+end_src
* surround: swap open/close space/no space behavior
  #+begin_src emacs-lisp
    (with-eval-after-load 'evil-surround (evil-add-to-alist
     'evil-surround-pairs-alist
     ?\( '("(" . ")")
     ?\[ '("[" . "]")
     ?\{ '("{" . "}")
     ?\) '("( " . " )")
     ?\] '("[ " . " ]")
    ?\} '("{ " . " }")))
  #+end_src
* disable smartparens/auto-pairs by default
  #+begin_src emacs-lisp
      (remove-hook 'prog-mode-hook #'smartparens-mode)
  #+end_src
* Appearance/windows/gui
#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)

  ;; no extra frame for ediff control buffer
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)

  (defun set-truncate-lines ()
    (toggle-truncate-lines 1))

  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'prog-mode-hook 'set-truncate-lines)

  (add-hook 'fundamental-mode-hook 'set-truncate-lines)
  (setq dotspacemacs-whitespace-cleanup 'all)
  (global-spacemacs-whitespace-cleanup-mode)
#+END_SRC

* Typescript
#+BEGIN_SRC emacs-lisp
  (setq typescript-indent-level 2)
#+END_SRC
* projectile config
#+BEGIN_SRC emacs-lisp
  (setq projectile-switch-project-action 'magit-status)
#+END_SRC

* org config

Need with-eval-after-load form to ensure we use spacemacs versioon of org-mode,
not old version that ships with emacs

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    ;; `org-tempo' provides template expansion like <s <TAB> for source blocks
    (require 'org-tempo)

    (defun disable-company-mode()
      (company-mode -1))
    (add-hook 'org-mode-hook 'disable-company-mode)

    (setq org-src-fontify-natively t
          org-capture-templates
          '(
            ("s" "Sharethrough/work-related capture")
            ("st" "Todo for work" entry (file+headline "/Users/travis/Dropbox/org/work.org" "Tasks")
             "* TODO %?\n  %i\n\n")
            ("s1" "1 on 1 meeting" entry (file+olp+datetree "/Users/travis/Dropbox/org/work.org" "1on1s")
             "* %?\n Action Items:\n")
            ("ss" "standup" entry (file+olp+datetree "/Users/travis/Dropbox/org/work.org" "standups")
             "* Yesterday\n - %?\n\n* Today\n - \n\n")
            ("b" "Blood pressure" table-line (file+headline "/Users/travis/Dropbox/org/index.org" "Blood pressure")
             "| %U | %? | | | |\n")
            ("t" "Todo" entry (file+headline "/Users/travis/Dropbox/org/index.org" "Tasks")
             "* TODO %?\n  %i\n\n")
            ("w" "Workout" plain
             (file+olp+datetree "/Users/travis/Dropbox/org/index.org" "Workouts")
             (file "/Users/travis/Dropbox/org/workout-template.org")
             :empty-lines 1)
            ("j" "Journal" plain (file+olp+datetree "/Users/travis/Dropbox/org/journal.org")
             "%?\n%i\nEntered on %U\n" :empty-lines 1))
          org-agenda-files (list "/Users/travis/Dropbox/org")

          org-structure-template-alist '(("a" . "export ascii")
                                         ("c" . "center")
                                         ("C" . "comment")
                                         ("e" . "example")
                                         ("E" . "export")
                                         ("h" . "export html")
                                         ("l" . "export latex")
                                         ("q" . "quote")
                                         ("s" . "src")
                                         ("v" . "verse")))

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((C . t) (ruby . t) (js . t) (scheme . t) (emacs-lisp . t) (shell . t))))
#+END_SRC

* aliases for easier M-x'ing
#+BEGIN_SRC emacs-lisp
  (defalias 'eb 'eval-buffer)
  (defalias 'gho (lambda () (interactive) (github-link "tjefferson08" nil)))
  (defalias 'ghu (lambda () (interactive) (github-link nil nil)))
  (defalias 'rb 'revert-buffer)
  (defalias 'ttl 'toggle-truncate-lines)
#+END_SRC

* magit/github custom commands and helpers
#+BEGIN_SRC emacs-lisp
  ;; make status buffer always be fullscreen
  (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)


  ;; requires current branch to track from PR target branch, and when
  ;; you push your local, you need to push to origin, otherwise it'll
  ;; push up to the tracked remote (upstream) by default, and we don't
  ;; want to pollute with a bunch of PR branches
  (defun pull-request-url ()
    "Build the URL for the pull request on GitHub corresponding
  to the current branch. Uses Magit."
    (interactive)
    (let* ((extract-app-and-remote-re ".*github.com[:/]\\(.*\\)/\\(.*\\)")
           (full-remote-url (magit-get "remote" (magit-get-remote) "url"))
           (remote-url (if (s-suffix? ".git" full-remote-url)
                           (substring full-remote-url 0 -4)
                         full-remote-url)))
      (string-match extract-app-and-remote-re remote-url 0)
      (message extract-app-and-remote-re full-remote-url remote-url)
      (let* ((remote (match-string-no-properties 1 remote-url))
             (app-name (match-string-no-properties 2 remote-url))
             (current-branch (magit-get-current-branch))
             (tracked-remote-and-branch (split-string (magit-get-upstream-branch) "/"))
             (tracked-remote (nth 0 tracked-remote-and-branch))
             (tracked-branch (nth 1 tracked-remote-and-branch)))

        (let ((url (format "https://github.com/%s/%s/compare/%s...%s:%s"
                           remote
                           app-name
                           tracked-branch
                           (if (string-equal tracked-remote "origin")
                             remote
                             "tjefferson08")
                           current-branch)))
          (message url)
          (kill-new url)
          (browse-url url)))))

  (defun github-link (remote branch)
    "Link to current line on github.com"
    (interactive)

    (if (eq branch nil)
        (setq branch "master"))

    ;; git@github.com:signpost/core.git/tree/master/apps/API.js#L250
    (let* ((remote-url (magit-get "remote" (magit-get-remote) "url"))
           (remote-name (progn
                          (string-match "github\\.com[:/]\\([-_a-z0-9]+\\)" remote-url)
                          (match-string 1 remote-url)))

           (app-name (progn
                       (string-match "[/]\\([-_a-z0-9]+\\)\\(?:\\.git\\)?$" remote-url)
                       (match-string 1 remote-url)))
           (target-url (concat
                        "https://github.com/"
                        (or remote-name "signpost")
                        "/"
                        app-name
                        "/tree/"
                        branch
                        "/"
                        (file-relative-name (buffer-file-name) (projectile-project-root))
                        "#L"
                        (int-to-string (line-number-at-pos)))))
      (message target-url)
      (browse-url target-url)
      (kill-new target-url)))

#+END_SRC
* GNUS / email settings
#+BEGIN_SRC emacs-lisp
  (setq user-mail-address "traviscjefferson@gmail.com"
        user-full-name "Travis Jefferson")

  (setq gnus-select-method
        '(nnimap "gmail"
                 (nnimap-address "imap.gmail.com")  ; it could also be imap.googlemail.com if that's your server.
                 (nnimap-server-port "imaps")
                 (nnimap-stream ssl)))

  (setq smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 587
        gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\"]\"[#'()]")

  (setq send­mail­function 'smtpmail­send­it)
  (setq message­send­mail­function 'smtpmail­send­it)
#+END_SRC
* JS config
  #+begin_src emacs-lisp
    (message "actually running js config block")
    (defun disable-emmet-mode ()
      (message "disabling emmet-mode")
      (emmet-mode -1))

    (defun disable-smart-parens-mode ()
      (interactive)
      (message "disabling smartparens-mode")
      (smartparens-mode -1))

    (defun enable-company-mode ()
      (interactive)
      (message "enabling copmany mode")
      (company-mode 1))

    (setq js-indent-level 2)
    ;; TODO maybe do this with dir-locals
    (setq js2-strict-missing-semi-warning nil)
    (eval-after-load 'js-mode
       '(add-hook 'js-mode-hook #'add-node-modules-path))
    ;; (add-to-list 'spacemacs--prettier-modes 'javascript-mode)
    ;; (add-hook 'javascript-mode-hook 'prettier-js-mode)
    ;; (add-hook 'javascript-mode-hook 'disable-emmet-mode)
    ;; (add-hook 'javascript-mode-hook 'enable-company-mode)

    ;; (add-to-list 'spacemacs--prettier-modes 'typescript-mode)
    ;; (add-hook 'typescript-mode-hook 'prettier-js-mode)
    ;; (add-hook 'typescript-mode-hook 'disable-emmet-mode)
    ;; (add-hook 'typescript-mode-hook 'enable-company-mode)

    ;; (add-to-list 'spacemacs--prettier-modes 'rjsx-mode)
    ;; (add-hook 'rjsx-mode-hook 'prettier-js-mode)
    ;; (add-hook 'rjsx-mode-hook 'disable-emmet-mode)
    ;; (add-hook 'rjsx-mode-hook 'enable-company-mode)
  #+end_src

* Ruby config
  #+begin_src emacs-lisp
    (setq rbenv-installation-dir "/usr/local/bin/rbenv")


  #+end_src

* Web/html/erb config
  #+begin_src emacs-lisp
(setq web-mode-sql-indent-offset 2)
(setq web-mode-css-indent-offset 2)
(setq web-mode-markup-indent-offset 2)
(setq web-mode-code-indent-offset 2)
(setq web-mode-markup-indent-offset 2)
(setq web-mode-attr-indent-offset 2)
(setq web-mode-attr-value-indent-offset 2)

  #+end_src
